本节主要开发，用户注册，邮件激活
注册逻辑：进入注册页-> 填写注册表单(并进行实时校验)-> 提交后台，新user入库，获取id封装加密封装到session级别的token中 ，
并创建激活链接发送到注册邮箱 -> 点击激活url -> 对比代入的 token 是否有效，指定时间段内，成功匹配，则将user状态切换成已激活，
否则跳转注册页，重新发送激活邮件。

1. 注册业务相关代码，主要通过注册表单落地 flasky/app/auth/forms.py
    ------------------------------------------------------------------------------------------------
    from flask_wtf import FlaskForm
    from wtforms import StringField,PasswordField,BooleanField,SubmitField,ValidationError
    from wtforms.validators import DataRequired,Length,Email,Regexp,EqualTo
    from ..models import User

    class RegistrationForm(FlaskForm):
    	email = StringField('Email', validators=[DataRequired(), Length(1, 64),Email()]) # 名称为Email,不为空，字符长度1~64，Email类型
    	username = StringField('Username', validators=[DataRequired(),Length(1, 64),Regexp('^[A-Za-z][A-Za-z0-9_.]*$', 0,'Usernames must have only letters, numbers, dots or underscores')])
    	# 名称为Username，不为空，字符长度1~64，以字母开头中间可带字母、数字、下划线、点，并以此结尾，不忽略大小写，错误提示
    	password = PasswordField('Password', validators=[DataRequired(), EqualTo('password2', message='Passwords must match.')]) # 两次输入必须一致
    	password2 = PasswordField('Confirm password', validators=[DataRequired()])
    	submit = SubmitField('Register') # 提交按钮

    	# 前面在填写时会自动调用validate_ 前缀开头的校验函数
    	def validate_email(self, field): # 查看该邮件是否已经被注册
    		if User.query.filter_by(email=field.data).first():
    			raise ValidationError('Email already registered.')

    	def validate_username(self, field): # 查看用户名是否已经被使用
    		if User.query.filter_by(username=field.data).first():
    			raise ValidationError('Username already in use.')
    ------------------------------------------------------------------------------------------------


2.模拟 itsdangerous 模块 生成激活认证 token 机制
    # 激活虚拟环境
    huhao:flasky huhao$ source venv/bin/activate
    # shell 模式启动
    (venv) huhao:flasky huhao$ ./manage.py shell
    # 导如依赖
    >>> from manage import app
    >>> from itsdangerous import TimedJSONWebSignatureSerializer as Serializer
    >>> s = Serializer(app.config['SECRET_KEY'], expires_in = 3600) # 基于加密字符串，创建有效期为1h的序列化对象
    >>> token = s.dumps({ 'confirm': 23 }) # 序列化json,生成加密token,随激活邮件发送出去
    >>> token
    'eyJhbGciOiJIUzI1NiIsImV4cCI6MTUzNTM2NTY2MSwiaWF0IjoxNTM1MzYyMDYxfQ.eyJjb25maXJtIjoyM30.PaEjpv6G_zUkErAuMOc18ZSjqfw3NutU3M7I3ShsVrs'
    >>> data = s.loads(token) # 解析token，随激活链接带回
    >>> data
    {u'confirm': 23}
    >>>


4. 编辑User 模型
    1）添加 confirmed 字段，标识当前账户是否邮件激活 flasky/app/models.py
    2）添加 生成token 和 校验 token 的函数
    ------------------------------------------------------------------------------------------------
    from itsdangerous import TimedJSONWebSignatureSerializer as Serializer
    from flask import current_app
    ...
    class User(UserMixin, db.Model):
        ...
        confirmed = db.Column(db.Boolean, default=False) # 标记当前账户是否被确认
        ...
        def generate_confirmation_token(self, expiration=3600):
        		s = Serializer(current_app.config['SECRET_KEY'], expiration) # 序列化加密，刚注册并入库用户
        		return s.dumps({'confirm': self.id}) # 返回token

        def confirm(self, token):
            s = Serializer(current_app.config['SECRET_KEY'])
            try:
                data = s.loads(token)
            except:
                return False

            if data.get('confirm') != self.id: # 激活链接代入的id 与 保存的id 不一致，激活失败
                return False

            self.confirmed = True # 否则激活成功，将账户状态改为已被激活
            db.session.add(self) # 入库，修改激活状态
            db.session.commit()
            return True

    ------------------------------------------------------------------------------------------------

    3）同步模型修改到数据库
    # 进入虚拟环境
    huhao:flasky huhao$ source venv/bin/activate

    # 生成迁移脚本
    (venv) huhao:flasky huhao$ python manage.py db migrate -m 'add confirmed in User'
    INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
    INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
    INFO  [alembic.autogenerate.compare] Detected added column 'users.confirmed'
      Generating /Users/huhao/software/idea_proj/flasky/migrations/versions/fc806d166847_add_confirmed_in_user.py ... done

    # 执行往数据库同步迁移命令
    (venv) huhao:flasky huhao$ python manage.py db upgrade
    INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
    INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
    INFO  [alembic.runtime.migration] Running upgrade 7b69c645e8b5 -> fc806d166847, add confirmed in User
    /Users/huhao/software/idea_proj/flasky/venv/lib/python2.7/site-packages/alembic/util/messaging.py:69: UserWarning: Skipping unsupported ALTER for creation of implicit constraint
      warnings.warn(msg)

    # 检测是否同步成功
    (venv) huhao:flasky huhao$ python manage.py shell
    >>> db
    <SQLAlchemy engine=sqlite:////Users/huhao/software/idea_proj/flasky/data-dev.sqlite>
    >>> str(User.query)
    'SELECT users.id AS users_id, users.email AS users_email, users.username AS users_username, users.password_hash AS users_password_hash, users.confirmed AS users_confirmed, users.role_id AS users_role_id \nFROM users'
    >>> exit()




5.编写测试类，测试 generate_confirmation_token 和 confirm
    1).编写测试函数 flasky/tests/test_user_model.py
    ------------------------------------------------------------------------------------------------
    import unittest,time
    from app.models import User
    from app import db

    class UserModelTestCase(unittest.TestCase):
        ....
        def test_invalid_confirmation_token(self):
            # 测试无效激活码
            u1 = User(password='cat')
            u2 = User(password='dog')
            db.session.add(u1)
            db.session.add(u2)
            db.session.commit() # 保存两个用户到数据库
            token = u1.generate_confirmation_token() # 取出u1的id加密后的token
            self.assertFalse(u2.confirm(token)) # u2 的id 与 u1 的进行匹配

        def test_expired_confirmation_token(self):
            # 测试激活过期策略
            u = User(password='cat')
            db.session.add(u)
            db.session.commit()
            token = u.generate_confirmation_token(1)
            time.sleep(2)
            self.assertFalse(u.confirm(token))

    ------------------------------------------------------------------------------------------------

    2).执行测试
    # 进入虚拟环境
    huhao:flasky huhao$ source venv/bin/activate
    # 执行测试类测试
    (venv) huhao:flasky huhao$ ./manage.py test_basic
    test_app_exists (test_basic.BasicsTestCase) ... ok
    test_app_is_testing (test_basic.BasicsTestCase) ... ok
    test_expired_confirmation_token (test_user_model.UserModelTestCase) ... ok  <<<
    test_invalid_confirmation_token (test_user_model.UserModelTestCase) ... ok  <<<
    test_no_password_getter (test_user_model.UserModelTestCase) ... ok
    test_password_salts_are_random (test_user_model.UserModelTestCase) ... ok
    test_password_setter (test_user_model.UserModelTestCase) ... ok
    test_password_verification (test_user_model.UserModelTestCase) ... ok

    ----------------------------------------------------------------------
    Ran 8 tests in 4.595s

    OK
    (venv) huhao:flasky huhao$


6. 视图页配置跳转控制器
    ------------------------------------------------------------------------------------------------
    from flask import render_template,redirect,request,url_for,flash
    from flask_login import login_user,logout_user,login_required,current_user
    from . import auth
    from ..models import User
    from ..email import send_email
    from .. import db
    from .forms import LoginForm,RegistrationForm

    @auth.before_app_request
    def before_request():
    	# 用户成功登录，但未完成激活，访问的服务端点，不属于 auth 模块，且为非静态资源，全部重定向到为激活页，诱导重新发送邮件激活
    	if current_user.is_authenticated \
    			and not current_user.confirmed \
    			and request.endpoint[:5] != 'auth.' \
    			and request.endpoint != 'static':
    		return redirect(url_for('auth.unconfirmed'))

    ....

    @auth.route('/register', methods=['GET', 'POST'])
    def register():
    	form = RegistrationForm()
    	if form.validate_on_submit(): # POST
    		user = User(email=form.email.data,username=form.username.data,password=form.password.data) # 封装user，填表时已做唯一性检验
    		db.session.add(user) # 入库
    		db.session.commit()
    		token = user.generate_confirmation_token() # 生成激活token
    		send_email(user.email,'Confirm Your Account','auth/email/confirm',user=user,token=token) # 发送激活邮件
    		flash('You can now login.') # 提示可以 登录了
    		return redirect(url_for('auth.login')) # 重定向到登录页
    	return render_template('auth/register.html', form=form) # GET 跳转注册页


    @auth.route('/confirm/<token>') # 激活确认页
    @login_required # 只有在登录前提下，侧能进行校验
    def confirm(token):
    	if current_user.confirmed: # 已经确认，返回主页
    		return redirect(url_for('main.index'))
    	if current_user.confirm(token): # 提交确认，token 校验通过
    		flash('You have confirmed your account. Thanks!')
    	else: # token 无效或过期
    		flash('The confirmation link is invalid or has expired.')
    	return redirect(url_for('main.index')) # 重定向到主页


    @auth.route('/unconfirmed')
    def unconfirmed(): # 匿名用户或已经通过校验(以登录)，通过地址跳转，直接被推回主页，
    	if current_user.is_anonymous or current_user.confirmed:
    		return redirect(url_for('main.index'))
    	return render_template('auth/unconfirmed.html') # 登录但未完成激活的，跳转 unconfirmed 也，诱导重新发送激活邮件，重新激活


    @auth.route('/confirm')
    @login_required
    def resend_confirmation(): # unconfirmed页 重新发送激活邮件，然后重定向到主页，避免重复发送
    	token = current_user.generate_confirmation_token()
    	send_email(current_user.email, 'Confirm Your Account','auth/email/confirm', user=current_user, token=token)
    	flash('A new confirmation email has been sent to you by email.')
    	return redirect(url_for('main.index'))

    ------------------------------------------------------------------------------------------------

7.编写模板 flasky/app/templates/auth
    login.html  # 添加进入注册页超链接
    ------------------------------------------------------------------------------------------------
    {% extends "base.html" %}
    {% import "bootstrap/wtf.html" as wtf %}

    {% block title %}Flasky - Login{% endblock %}

    {% block page_content %}
        <div class="page-header">
            <h1>Login</h1>
        </div>
        <div class="col-md-4">
            {{ wtf.quick_form(form) }}
            <br>                                                                                   <!-- 《《《 -->
            <p>New user? <a href="{{ url_for('auth.register') }}">Click here to register</a>.</p>  <!-- 《《《 -->
        </div>
    {% endblock %}

    ------------------------------------------------------------------------------------------------

    register.html # 注册页
    ------------------------------------------------------------------------------------------------
    {% extends "base.html" %}
    {% import "bootstrap/wtf.html" as wtf %}

    {% block title %}Flasky - Register{% endblock %}

    {% block page_content %}
        <div class="page-header">
            <h1>Register</h1>
        </div>
        <div class="col-md-4">
            {{ wtf.quick_form(form) }}
        </div>
    {% endblock %}

    ------------------------------------------------------------------------------------------------

    unconfirmed.html # 登录，未激活，重新发送激活邮件
    ------------------------------------------------------------------------------------------------
    {% extends "base.html" %}

    {% block title %}Flasky - Confirm your account{% endblock %}

    {% block page_content %}
    <div class="page-header">
        <h1>
            Hello, {{ current_user.username }}!
        </h1>
        <h3>You have not confirmed your account yet.</h3>
        <p>
            Before you can access this site you need to confirm your account.
            Check your inbox, you should have received an email with a confirmation link.
        </p>
        <p>
            Need another confirmation email?
            <a href="{{ url_for('auth.resend_confirmation') }}">Click here</a>
        </p>
    </div>
    {% endblock %}

    ------------------------------------------------------------------------------------------------

    flasky/app/templates/auth/email/ 激活邮件模板
    confirm.html
    ------------------------------------------------------------------------------------------------
    <p>Dear {{ user.username }},</p>
    <p>Welcome to <b>Flasky</b>!</p>
    <p>To confirm your account please <a href="{{ url_for('auth.confirm', token=token, _external=True) }}">click here</a>.</p>
    <p>Alternatively, you can paste the following link in your browser's address bar:</p>
    <p>{{ url_for('auth.confirm', token=token, _external=True) }}</p>
    <p>Sincerely,</p>
    <p>The Flasky Team</p>
    <p><small>Note: replies to this email address are not monitored.</small></p>
    ------------------------------------------------------------------------------------------------

    confirm.txt
    ------------------------------------------------------------------------------------------------
    Dear {{ user.username }},

    Welcome to Flasky!

    To confirm your account please click on the following link:

    {{ url_for('auth.confirm', token=token, _external=True) }}

    Sincerely,

    The Flasky Team

    Note: replies to this email address are not monitored.
    ------------------------------------------------------------------------------------------------


8.配置模块优化 flasky/config.py (开发阶段，将需要预加载到环境中的配置，先写死，后期上线，再删除)
    注：MAIL_USERNAME 与 FLASKY_MAIL_SENDER 中<>的地址，必须一致，否侧无法发送
    ------------------------------------------------------------------------------------------------
    # 基础配置
    class Config:
    	SECRET_KEY = os.environ.get('SECRET_KEY') or 'hard to guess string' # http 请求加密字符串，逻辑或
    	MAIL_SERVER = os.environ.get('MAIL_SERVER','smtp.qq.com') # email 模块 通过 qq 邮件服务器发送
    	MAIL_PORT = int(os.environ.get('MAIL_PORT','587')) # stmp 端口
    	MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS','true').lower() in ['true','on',1] # 从环境匹配是否使用了 TLS 连接
    	MAIL_USERNAME = os.environ.get('MAIL_USERNAME') or '101798448871@qq.com' # 使用邮件服务名称
    	MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD') or 'untblapsprgebccbsl' # 使用邮件服务密钥
    	FLASKY_MAIL_SUBJECT_PREFIX = '[Flasky]' # 邮件主题前缀
    	FLASKY_MAIL_SENDER = 'Flasky Admin <101798448871@qq.com>' # 邮件主题显示的发件人
    	FLASKY_ADMIN = os.environ.get('FLASKY_ADMIN') or 'abc@aaaa.com' # 管理员 (新用户登录，需要通知的人)
    	SQLALCHEMY_TRACK_MODIFICATIONS = False # 是否主动追踪ORM模板变动 (否)

    	@staticmethod # 静态方法，用与执行部分待定的初始化操作
    	def init_app(app):
    		pass

    ------------------------------------------------------------------------------------------------


9.web测试
    （注意，测试次数不要过度，第三方邮箱服务商，往往会有各种限制）
    1）进入虚拟环境
    huhao:flasky huhao$ source venv/bin/activate

    2）运行web程序
    (venv) huhao:flasky huhao$ ./manage.py runserver --host 127.0.0.1

    3）访问 主页 http://127.0.0.1:5000

    4) 点击index 页右上角 "Log In",进入登录页

    5）点击 "Click here to register." 进入注册页

    6）输入信息，并检测 Email格式约束,Email 与 Username唯一性约束，两次密码一致性约束是否生效 (点击提交按钮时，活动反馈)

    7）已注册用户的删除
    (venv) huhao:flasky huhao$ ./manage.py db
    >>> me = User.query.filter_by(username='huhao1').first()
    >>> db.session.delete(me)
    >>> db.session.commit()
    >>> exit()

    8）采用异步邮件发送激活邮件，因此会快速跳转到 Login 页，并提示登录。直接登录，发现被重定向到unconfirmed页，重新点击
    "Need another confirmation email? Click here" 再次发送激活邮件，提示新邮件已发送成功。

    9）点击第一封激活邮件，发现已经失效，
    http://127.0.0.1:5000/auth/confirm/eyJhbGciOiJIUzI1NiIsImV4cCI6MTUzNTM3MzUyOSwiaWF0IjoxNTM1MzY5OTI5fQ.eyJjb25maXJtIjoxMH0.gE6eDov9qwoqp4V22IroZiaKWRstDTzL84_cxuzpJ3Q

    10）点击第二封邮件，成功激活


10.






