本节功能：登录状态修改绑定邮箱

1.修改User模型，添加邮箱修改 token 申请函数 和 邮箱修改函数
    flasky/app/models.py
    ------------------------------------------------------------------------------------------------
    class User(UserMixin, db.Model):
        def generate_email_change_token(self, new_email, expiration=3600):
            s = Serializer(current_app.config['SECRET_KEY'], expiration) # 生成修改绑定邮箱token(注册用户记录唯一标识)
            return s.dumps({'change_email': self.id, 'new_email': new_email}).decode('utf-8')

        def change_email(self, token): # 执行修改邮箱
            s = Serializer(current_app.config['SECRET_KEY']) # 基于加密字符串，创建序列化对象
            try:
                data = s.loads(token.encode('utf-8')) # 将 解析邮件带回的token
            except:
                return False
            if data.get('change_email') != self.id: # 比对 id
                return False
            new_email = data.get('new_email') # 从解析邮件的数据中提取 邮箱号
            if new_email is None:
                return False
            if self.query.filter_by(email=new_email).first() is not None: # 不存在指定的邮箱号，则退回
                return False
            self.email = new_email # 更新实例 （游离态对象）
            db.session.add(self) # 添加到 session, 在上层提交事务
            return True

    ------------------------------------------------------------------------------------------------


2.编辑 邮箱修改表单
    flasky/app/auth/forms.py
    ------------------------------------------------------------------------------------------------
    class ChangeEmailForm(FlaskForm):
    	# 修改绑定邮箱表单
    	email = StringField('New Email', validators=[DataRequired(), Length(1, 64),Email()])
    	password = PasswordField('Password', validators=[DataRequired()])
    	submit = SubmitField('Update Email Address')

    	def validate_email(self, field):
    		if User.query.filter_by(email=field.data).first():
    			raise ValidationError('Email already registered.')

    ------------------------------------------------------------------------------------------------


3.编辑 请求跳转控制器
    flasky/app/auth/views.py
    ------------------------------------------------------------------------------------------------
    from .forms import LoginForm,RegistrationForm,ChangePasswordForm,PasswordResetRequestForm,PasswordResetForm,ChangeEmailForm

    @auth.route('/change_email', methods=['GET', 'POST'])
    @login_required # 必须登录状态才能提交
    def change_email_request():
    	form = ChangeEmailForm()
    	if form.validate_on_submit(): # POST
    		if current_user.verify_password(form.password.data): # 校验通过
    			new_email = form.email.data # 提取新邮箱
    			token = current_user.generate_email_change_token(new_email) # 生成token
    			# 发送修改邮件
    			send_email(new_email, 'Confirm your email address','auth/email/change_email',user=current_user, token=token)
    			flash('An email with instructions to confirm your new email address has been sent to you.') # 消息提示
    			return redirect(url_for('main.index')) # 重定向到主页
    		else:
    			flash('Invalid email or password.') # 邮箱格式校验不通过，或密码错误，直接退回
    	return render_template("auth/change_email.html", form=form) # GET


    @auth.route('/change_email/<token>')
    @login_required
    def change_email(token):
    	if current_user.change_email(token): # 点击修改邮件连接，解析token 数据，校验通过，执行修改操作
    		db.session.commit()
    		flash('Your email address has been updated.')
    	else:
    		flash('Invalid request.')
    	return redirect(url_for('main.index'))

    ------------------------------------------------------------------------------------------------


4.编辑 绑定邮箱修改邮件模板 flasky/app/templates/auth/email
    change_email.html
    ------------------------------------------------------------------------------------------------
    <p>Dear {{ user.username }},</p>
    <p>To confirm your new email address <a href="{{ url_for('auth.change_email', token=token, _external=True) }}">click here</a>.</p>
    <p>Alternatively, you can paste the following link in your browser's address bar:</p>
    <p>{{ url_for('auth.change_email', token=token, _external=True) }}</p>
    <p>Sincerely,</p>
    <p>The Flasky Team</p>
    <p><small>Note: replies to this email address are not monitored.</small></p>

    ------------------------------------------------------------------------------------------------

    change_email.txt
    ------------------------------------------------------------------------------------------------
    Dear {{ user.username }},

    To confirm your new email address click on the following link:

    {{ url_for('auth.change_email', token=token, _external=True) }}

    Sincerely,

    The Flasky Team

    Note: replies to this email address are not monitored.

    ------------------------------------------------------------------------------------------------


5.编辑 邮箱修改 html模板
    flasky/app/templates/auth/change_email.html
    ------------------------------------------------------------------------------------------------
    {% extends "base.html" %}
    {% import "bootstrap/wtf.html" as wtf %}

    {% block title %}Flasky - Change Email Address{% endblock %}

    {% block page_content %}
    <div class="page-header">
        <h1>Change Your Email Address</h1>
    </div>
    <div class="col-md-4">
        {{ wtf.quick_form(form) }}
    </div>
    {% endblock %}

    ------------------------------------------------------------------------------------------------


6.编辑 入口 (登录后才能操作，所以挂在base页)
    flasky/app/templates/base.html
    ------------------------------------------------------------------------------------------------
    <ul class="dropdown-menu">
        <li><a href="{{ url_for('auth.change_password') }}">Change Password</a></li>
        <li><a href="{{ url_for('auth.change_email_request') }}">Change Email</a></li>
        <li><a href="{{ url_for('auth.logout') }}">Log Out</a></li>
    </ul>
    ------------------------------------------------------------------------------------------------


7. web测试
    1) 进入虚拟环境
    huhao:flasky huhao$ source venv/bin/activate

    2) 运行web服务
    (venv) huhao:flasky huhao$ ./manage.py runserver --host 127.0.0.1
    ...

    3) 访问主页 http://127.0.0.1:5000

    4) 点击右上角 "LogIn" 登入

    5）跳转 index页，点击右上角"Account/Change Email"

    6) 跳转密码修改页，填写新邮箱 和 账号密码，提交后会受到重置邮箱确认邮件

    7）点击确认邮件的链接，完成修改，系统提示成功修改

    7）登出，重新登入，验证修改是否成功。