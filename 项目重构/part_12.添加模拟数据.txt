本节功能：创建模拟用户，已经用户发布的博客，为分页模块做准备。

1.拆分依赖清单
    flasky/requirements
        |. common.txt  公共依赖
        |. dev.txt     开发环境依赖
        |. prod.txt    生产环境依赖

    common.txt
    ------------------------------------------------------------------------------------------------
    alembic==1.0.0
    blinker==1.4
    click==6.7
    dominate==2.3.1
    Flask==1.0.2
    Flask-Bootstrap==3.3.7.1
    Flask-Mail==0.9.1
    Flask-Migrate==2.2.1
    Flask-Moment==0.6.0
    Flask-Script==2.0.6
    Flask-SQLAlchemy==2.3.2
    Flask-WTF==0.14.2
    itsdangerous==0.24
    Jinja2==2.10
    Mako==1.0.7
    MarkupSafe==1.0
    python-dateutil==2.7.3
    python-editor==1.0.3
    six==1.11.0
    SQLAlchemy==1.2.11
    visitor==0.1.3
    Werkzeug==0.14.1
    WTForms==2.2.1
    ------------------------------------------------------------------------------------------------

    dev.txt (或 forgerypy=0.1，两者均可)
    ------------------------------------------------------------------------------------------------
    -r common.txt
    faker=0.9.0
    ------------------------------------------------------------------------------------------------

    prod.txt
    ------------------------------------------------------------------------------------------------
    -r common.txt
    ------------------------------------------------------------------------------------------------

    注：pip freeze > requirements.txt 依赖归纳，pip install -r requirements.txt 依赖回放。

3.修改模型，添加伪造数据函数
    flasky/app/models.py
    ------------------------------------------------------------------------------------------------
    class User(UserMixin, db.Model):
        ....
        # 模拟塑胶
        @staticmethod
        def generate_fake(count=100):
            from sqlalchemy.exc import IntegrityError
            from random import seed
            import forgery_py
            seed()
            for i in range(count):
                u = User(email=forgery_py.internet.email_address(), username=forgery_py.internet.user_name(True),
                         password=forgery_py.lorem_ipsum.word(), confirmed=True, name=forgery_py.name.full_name(),
                         location=forgery_py.address.city(), about_me=forgery_py.lorem_ipsum.sentence(),
                         member_since=forgery_py.date.date(True))
                db.session.add(u)
                try:
                    db.session.commit()
                except IntegrityError:
                    db.session.rollback()

    class Post(db.Model):
        ....
        # 模拟数据
        @staticmethod
        def generate_fake(count=100):
            from sqlalchemy.exc import IntegrityError
            from random import seed, randint
            import forgery_py
            seed()
            user_count = User.query.count()
            for i in range(count):
                u = User.query.offset(randint(0, user_count - 1)).first()
                p = Post(body=forgery_py.lorem_ipsum.sentences(randint(1, 3)),
                         timestamp=forgery_py.date.date(True),author=u)
                db.session.add(u)
                try:
                    db.session.commit()
                except IntegrityError:
                    db.session.rollback()


4.添加伪造数据
    venv) huhao:flasky huhao$ ./manage.py shell
    >>> User.generate_fake() # 字段比较多，稍慢
    >>> Post.generate_fake()
    >>> Post.query.all()[:5]
    [<Post 1>, <Post 2>, <Post 3>, <Post 4>, <Post 5>]
    >>>


5.web测试
    直接进入index页，就可查看伪造数据。

