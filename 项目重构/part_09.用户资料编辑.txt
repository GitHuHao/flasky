本节功能：用户资料编辑模块

1.编辑用户信息修改表单
    flasky/app/main/forms.py
    ----------------------------------------------------------------------
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-

    """
    Author: HuHao <huhao1@cmcm.com>
    Date: '2018/8/28'
    Info:

    """
    from flask_wtf import FlaskForm
    from wtforms import StringField,BooleanField,SubmitField,ValidationError,TextAreaField,SelectField
    from wtforms.validators import DataRequired,Length,Email,Regexp
    from ..models import User,Role


    class EditProfileForm(FlaskForm):
    	# 普通用户修改表单
    	name = StringField('Real name', validators=[Length(0, 64)])
    	location = StringField('Location', validators=[Length(0, 64)])
    	about_me = TextAreaField('About me')
    	submit = SubmitField('Submit')


    class EditProfileAdminForm(FlaskForm):
    	# 管理员修改表单
    	email = StringField('Email', validators=[DataRequired(), Length(1, 64),Email()])
    	username = StringField('Username', validators=[DataRequired(), Length(1, 64),
    	                                               Regexp('^[A-Za-z][A-Za-z0-9_.]*$', 0,
    										'Usernames must have only letters, numbers, dots or underscores')])
    	confirmed = BooleanField('Confirmed')
    	role = SelectField('Role', coerce=int)
    	name = StringField('Real name', validators=[Length(0, 64)])
    	location = StringField('Location', validators=[Length(0, 64)])
    	about_me = TextAreaField('About me')
    	submit = SubmitField('Submit')

    	def __init__(self, user, *args, **kwargs):
    		super(EditProfileAdminForm, self).__init__(*args, **kwargs)
    		self.role.choices = [(role.id, role.name) for role in Role.query.order_by(Role.name).all()] # 下拉选
    		self.user = user

    	def validate_email(self, field):
    		if field.data != self.user.email and User.query.filter_by(email=field.data).first(): # 两次输入邮箱不同，缺新输入邮箱未被使用
    			raise ValidationError('Email already registered.')

    	def validate_username(self, field):
    		if field.data != self.user.username and User.query.filter_by(username=field.data).first(): # 两次不同，且新昵称未被使用
    			raise ValidationError('Username already in use.')

    ----------------------------------------------------------------------

2.编辑 跳转视图
    flasky/app/main/views.py
    ----------------------------------------------------------------------
    from flask import render_template, redirect, url_for, abort, flash
    from flask_login import login_required, current_user
    from . import main
    from .forms import EditProfileForm, EditProfileAdminForm
    from .. import db
    from ..models import Role, User
    from ..decorators import admin_required
    ...


    @main.route('/edit-profile', methods=['GET', 'POST'])
    @login_required # 登录才能访问
    def edit_profile(): # 非admin 修改个人profile页
    	form = EditProfileForm()
    	if form.validate_on_submit(): # POST
    		current_user.name = form.name.data
    		current_user.location = form.location.data
    		current_user.about_me = form.about_me.data
    		db.session.add(current_user._get_current_object()) # 更新入库
    		db.session.commit()
    		flash('Your profile has been updated.') # 提示消息
    		return redirect(url_for('.user', username=current_user.username)) # 重定向 访问 /user, '.'表示继承当前页面的地址
    	form.name.data = current_user.name  # GET
    	form.location.data = current_user.location
    	form.about_me.data = current_user.about_me
    	return render_template('edit_profile.html', form=form)


    @main.route('/edit-profile/<int:id>', methods=['GET', 'POST'])
    @login_required # 登录才能访问
    @admin_required # admin 权限才能访问
    def edit_profile_admin(id):
    	user = User.query.get_or_404(id) # 查看指定用户是否存在
    	form = EditProfileAdminForm(user=user)
    	if form.validate_on_submit(): # POST
    		user.email = form.email.data
    		user.username = form.username.data
    		user.confirmed = form.confirmed.data
    		user.role = Role.query.get(form.role.data)
    		user.name = form.name.data
    		user.location = form.location.data
    		user.about_me = form.about_me.data
    		db.session.add(user) #入库
    		db.session.commit()
    		flash('The profile has been updated.') # 提示消息
    		return redirect(url_for('.user', username=user.username)) # 重定向带主页
    	form.email.data = user.email  # GET
    	form.username.data = user.username
    	form.confirmed.data = user.confirmed
    	form.role.data = user.role_id
    	form.name.data = user.name
    	form.location.data = user.location
    	form.about_me.data = user.about_me
    	return render_template('edit_profile.html', form=form, user=user)

    ----------------------------------------------------------------------


3.Profile页编辑html模板
    flasky/app/templates/edit_profile.html
    ----------------------------------------------------------------------
    {% extends "base.html" %}
    {% import "bootstrap/wtf.html" as wtf %}

    {% block title %}Flasky - Edit Profile{% endblock %}

    {% block page_content %}
    <div class="page-header">
        <h1>Edit Your Profile</h1>
    </div>
    <div class="col-md-4">
        {{ wtf.quick_form(form) }}
    </div>
    {% endblock %}

    ----------------------------------------------------------------------


4.编辑入口
    flasky/app/templates/user.html
    ----------------------------------------------------------------------
    <p>Member since {{ moment(user.member_since).format('L') }}. Last seen {{ moment(user.last_seen).fromNow() }}.</p> <!-- 注册时间，上次访问时间-->
    <p>
        {% if user == current_user %}
            <a class="btn btn-default" href="{{ url_for('.edit_profile') }}">Edit Profile</a>
        {% endif %}
        {% if current_user.is_administrator() %}
            <a class="btn btn-danger" href="{{ url_for('.edit_profile_admin', id=user.id) }}">Edit Profile [Admin]</a>
        {% endif %}
    </p>

    ----------------------------------------------------------------------


5.web测试
    1) 进入虚拟环境
    huhao:flasky huhao$ source venv/bin/activate

    2) 运行web服务
    (venv) huhao:flasky huhao$ ./manage.py runserver --host 127.0.0.1
    ...

    3) 访问主页 http://127.0.0.1:5000, 正常登陆

    4）点击导航栏 "Profile", 成功显示个人明细
        如果普通用户登录，只能看到 "Edit Profile",点击可以编辑自己的Profile信息；
        超级管理用户，还可以看到"Edit Profile [Admin]"，可以以管理员身份修改其他用户信息

    5）测试Location 连接地图功能






